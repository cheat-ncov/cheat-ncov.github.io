{"version":3,"sources":["config.js","components/ListExam.jsx","components/Answer.jsx","components/Exam.jsx","App.js","serviceWorker.js","index.js"],"names":["ListExam","props","state","error","isLoaded","data","fetch","config","then","res","json","result","console","log","setState","this","exams","className","map","e","id","key","href","exam_code","upload_date","Component","Answer","handleCheckboxChange","onChange","type","checked","answer","text","Exam","updateAnswer","questions","q","question_id","answers","a","answer_id","tmp_data","handleAnswerChange","code","exam","question","requestOptions","method","headers","body","JSON","stringify","response","ok","message","status","Promise","reject","catch","isChecked","filter","length","eventSource","EventSource","location","search","onmessage","parse","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ea604c27.chunk.js","sourcesContent":["export default {\n    API_URL : \"http://34.71.250.136:5000/\"\n}","import React, { Component } from 'react'\n\nimport config from '../config'\n\n\nexport default class ListExam extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\terror: null,\n\t\t\tisLoaded: false,\n\t\t\tdata: null\n\t\t};\n\t}\n\t\n\tcomponentDidMount() {\n\t\tfetch(config.API_URL + 'all')\n\t\t\t.then(res => res.json())\n\t\t\t.then(\n\t\t\t\t(result) => {\n\t\t\t\t\tconsole.log(result)\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tisLoaded: true,\n\t\t\t\t\t\tdata: result\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\t(error) => {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tisLoaded: true,\n\t\t\t\t\t\terror\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t)\n\t}\n\trender() {\n\t\tconst { error, isLoaded, data } = this.state\n\t\tif (isLoaded === false) {\n\t\t\treturn (\n\t\t\t\t<h1>Loading ...</h1>\n\t\t\t)\n\t\t}\n\t\tif (error != null) {\n\t\t\treturn (\n\t\t\t\t<h1>Error</h1>\n\t\t\t)\n\t\t}\n\t\tlet { exams } = data\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<div className=\"col-sm\">\n\t\t\t\t\t\t<h1>Exam list</h1>\n\t\t\t\t\t\t<table className=\"table\">\n\t\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t\t<th>#</th>\n\t\t\t\t\t\t\t\t\t<th>Exam code</th>\n\t\t\t\t\t\t\t\t\t<th>Upload date</th>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\texams.map((e, id) =>\n\t\t\t\t\t\t\t\t\t\t<tr key={id}>\n\t\t\t\t\t\t\t\t\t\t\t<td>{id + 1}</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t\t\t\t\t<a href={`/exam?code=${e.exam_code}`}>{e.exam_code}</a>\n\t\t\t\t\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t\t\t\t\t<td>{e.upload_date}</td>\n\t\t\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t)\n\t}\n}\n","import React, { Component } from 'react'\n\nexport default class Answer extends Component {\n    handleCheckboxChange = () => {\n        this.props.onChange(this.props)\n    }\n    render() {\n        return (\n            <div>\n                <input className='m-1' type=\"checkbox\" checked={this.props.answer.checked} onChange={this.handleCheckboxChange}/>\n                {this.props.answer.text}\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport Answer from './Answer';\nimport config from '../config';\n\nexport default class Exam extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\terror: null,\n\t\t\tisLoaded: false,\n\t\t\tdata: null\n\t\t};\n\n\t\tthis.eventSource = new EventSource(config.API_URL + \"answer_stream\" + this.props.location.search)\n\t}\n\n\tupdateAnswer = (data) => {\n\t\tconsole.log('see', data)\n\t\tlet questions = this.state.data.questions.map(q => {\n\t\t\tif(q.question_id === data.question_id) {\n\t\t\t\tq.answers = q.answers.map(a => {\n\t\t\t\t\tif(a.answer_id === data.answer_id) {\n\t\t\t\t\t\ta.checked = data.checked\n\t\t\t\t\t}\n\t\t\t\t\treturn a\n\t\t\t\t})\n\t\t\t}\n\t\t\treturn q;\n\t\t})\n\t\tlet tmp_data = this.state.data\n\t\ttmp_data.questions = questions\n\t\tthis.setState({data: tmp_data})\n\t}\n\n\thandleAnswerChange = (e) => {\n\t\tconst data = {\n\t\t\tcode: e.exam,\n\t\t\tquestion_id: e.question,\n\t\t\tanswer_id: e.answer.answer_id,\n\t\t\tchecked: !e.answer.checked\n\t\t}\n\n\t\tconst requestOptions = {\n\t\t\tmethod: 'POST',\n\t\t\theaders: { 'Content-Type': 'application/json' },\n\t\t\tbody: JSON.stringify(data)\n\t\t};\n\n\t\tfetch(config.API_URL + \"/answer\", requestOptions)\n\t\t\t.then(async response => {\n\t\t\t\tconst data = await response.json();\n\t\t\t\tif (!response.ok) {\n\t\t\t\t\tconst error = (data && data.message) || response.status;\n\t\t\t\t\treturn Promise.reject(error);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\t// this.setState({ errorMessage: error });\n\t\t\t\tconsole.error('There was an error!', error);\n\t\t\t});\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch(config.API_URL + 'exam' + this.props.location.search)\n\t\t\t.then(res => res.json())\n\t\t\t.then(\n\t\t\t\t(result) => {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tisLoaded: true,\n\t\t\t\t\t\tdata: result\n\t\t\t\t\t});\n\t\t\t\t},\n\t\t\t\t(error) => {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tisLoaded: true,\n\t\t\t\t\t\terror\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t)\n\t\tthis.eventSource.onmessage = e => this.updateAnswer(JSON.parse(e.data))\n\t}\n\n\tisChecked = (question) => {\n\t\tlet check_list = question.answers.filter(q => q.checked)\n\t\treturn check_list.length > 0\n\t}\n\n\trender() {\n\t\tconst { error, isLoaded, data } = this.state\n\t\tif (isLoaded === false) {\n\t\t\treturn (\n\t\t\t\t<h1>Loading ...</h1>\n\t\t\t)\n\t\t}\n\t\tif (error != null) {\n\t\t\treturn (\n\t\t\t<h1>Error: {error}</h1>\n\t\t\t)\n\t\t}\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t<div className=\"col col-8\">\n\t\t\t\t\t\t\t<h1>{data.code}</h1>\n\t\t\t\t\t\t\t<br></br>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tdata.questions.map((question, id) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<div key={id} id={id + 1}>\n\t\t\t\t\t\t\t\t\t\t\t<div className=\"card mb-3\">\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"card-header\">Question {id + 1}</div>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"card-body\">\n\t\t\t\t\t\t\t\t\t\t\t\t\t<pre>{question.text}</pre>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tquestion.answers.map((answer, id) =>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<Answer key={id} exam={data.code} question={question.question_id} answer={answer} onChange={this.handleAnswerChange}></Answer>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"col col-4\">\n\t\t\t\t\t\t\t<div className=\"border-primary fix-pos p-4\">\n\t\t\t\t\t\t\t\t<label className=\"form-control text-center\">Question list</label>\n\t\t\t\t\t\t\t\t<div className=\"d-flex justify-content-center\">\n\t\t\t\t\t\t\t\t\t<h5>{data.code}</h5>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className=\"\">{\n\t\t\t\t\t\t\t\t\tdata.questions.map((e, id) =>\n\t\t\t\t\t\t\t\t\t\t<a className={`badge ${this.isChecked(e) ? 'badge-success' : 'badge-light'}`} key={id} href={`#${id + 1}`}>{id + 1}</a>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t</div>\n\t\t)\n\t}\n}\n","import React, { Component } from 'react'\nimport ListExam from './components/ListExam';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\nimport './App.scss'\nimport Exam from './components/Exam'\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={ListExam}>\n          </Route>\n          <Route path=\"/exam\" component={Exam}>\n          </Route>\n        </Switch>\n      </Router>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}